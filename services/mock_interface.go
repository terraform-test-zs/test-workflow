// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package services is a generated GoMock package.
package services

import (
	reflect "reflect"

	gofr "developer.zopsmart.com/go/gofr/pkg/gofr"
	gomock "github.com/golang/mock/gomock"
)

// MockOrderSvc is a mock of OrderSvc interface.
type MockOrderSvc struct {
	ctrl     *gomock.Controller
	recorder *MockOrderSvcMockRecorder
}

// MockOrderSvcMockRecorder is the mock recorder for MockOrderSvc.
type MockOrderSvcMockRecorder struct {
	mock *MockOrderSvc
}

// NewMockOrderSvc creates a new mock instance.
func NewMockOrderSvc(ctrl *gomock.Controller) *MockOrderSvc {
	mock := &MockOrderSvc{ctrl: ctrl}
	mock.recorder = &MockOrderSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderSvc) EXPECT() *MockOrderSvcMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockOrderSvc) Get(ctx *gofr.Context, item string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, item)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockOrderSvcMockRecorder) Get(ctx, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOrderSvc)(nil).Get), ctx, item)
}
